// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;
using std::string;

// stepOne
Rcpp::List stepOne(bool findIn, int p, int n, double sigma, double tolerance, string Ftrace, string criteria, const Eigen::MatrixXd& Y, const Eigen::MatrixXd& X1, const Eigen::MatrixXd& X0, int k, double SST);
RcppExport SEXP _StepReg_stepOne(SEXP findInSEXP, SEXP pSEXP, SEXP nSEXP, SEXP sigmaSEXP, SEXP toleranceSEXP, SEXP FtraceSEXP, SEXP criteriaSEXP, SEXP YSEXP, SEXP X1SEXP, SEXP X0SEXP, SEXP kSEXP, SEXP SSTSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type findIn(findInSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< string >::type Ftrace(FtraceSEXP);
    Rcpp::traits::input_parameter< string >::type criteria(criteriaSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X0(X0SEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type SST(SSTSEXP);
    rcpp_result_gen = Rcpp::wrap(stepOne(findIn, p, n, sigma, tolerance, Ftrace, criteria, Y, X1, X0, k, SST));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_StepReg_stepOne", (DL_FUNC) &_StepReg_stepOne, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_StepReg(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
